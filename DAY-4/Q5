abstract class Statistics {
    public abstract int total(int[] numbers);
    public abstract double average(int[] numbers);

    public double mean(int[] numbers) {
        return average(numbers);
    }

    public int mode(int[] numbers) {
        Map<Integer, Integer> countMap = new HashMap<>();
        for (int num : numbers) {
            countMap.put(num, countMap.getOrDefault(num, 0) + 1);
        }
        return Collections.max(countMap.entrySet(), Map.Entry.comparingByValue()).getKey();
    }

    public double median(int[] numbers) {
        Arrays.sort(numbers);
        int length = numbers.length;
        if (length % 2 == 0) {
            return (numbers[length / 2 - 1] + numbers[length / 2]) / 2.0;
        } else {
            return numbers[length / 2];
        }
    }
}

class StatisticsImpl extends Statistics {
    @Override
    public int total(int[] numbers) {
        return Arrays.stream(numbers).sum();
    }

    @Override
    public double average(int[] numbers) {
        return (double) total(numbers) / numbers.length;
    }
}

public class Main {
    public static void main(String[] args) {
        StatisticsImpl stats = new StatisticsImpl();
        int[] numbers = {1, 2, 3, 4, 5, 6};

        System.out.println("Total: " + stats.total(numbers));
        System.out.println("Average: " + stats.average(numbers));
        System.out.println("Mean: " + stats.mean(numbers));
        System.out.println("Mode: " + stats.mode(numbers));
        System.out.println("Median: " + stats.median(numbers));
    }
}
